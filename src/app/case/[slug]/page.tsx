import type { Metadata } from "next";
import { notFound } from "next/navigation";
import Link from "next/link";
import Image from "next/image";
import {
  getProjectBySlug,
  resolveImageUrl,
  loadFeed,
  type FeedProject,
} from "@/lib/feed/loadFeed";

export const dynamic = "force-dynamic";

const SITE_BASE =
  process.env.NEXT_PUBLIC_SITE_URL ?? "https://realwebwins.com";

function toAbsoluteUrl(url: string) {
  try {
    return new URL(url, SITE_BASE).toString();
  } catch {
    return `${SITE_BASE.replace(/\/$/, "")}${url.startsWith("/") ? "" : "/"}${url}`;
  }
}

function sanitizeDescription(project: FeedProject) {
  return (
    project.summary ??
    project.title ??
    "Verified Realwebwins case study."
  );
}

function formatScore(score: number | null | undefined) {
  if (typeof score === "number" && Number.isFinite(score)) {
    return `${score}/100`;
  }
  return "Pending";
}

function formatTimestamp(iso?: string | null) {
  if (!iso) return "Unknown";
  const parsed = new Date(iso);
  if (Number.isNaN(parsed.getTime())) return "Unknown";
  return parsed.toISOString().slice(0, 10);
}

export async function generateStaticParams() {
  const feed = await loadFeed();
  return (feed.projects ?? [])
    .filter((project) => project.slug)
    .map((project) => ({ slug: project.slug as string }));
}

export async function generateMetadata({
  params,
}: {
  params: Promise<{ slug: string }>;
}): Promise<Metadata> {
  const { slug } = await params;
  const project = await getProjectBySlug(slug);

  if (!project) {
    return {
      title: "Case not found – Realwebwins",
      description: "The requested Realwebwins case could not be located.",
    };
  }

  const title = project.title ?? "Realwebwins Case";
  const description = sanitizeDescription(project);
  const imageUrl = resolveImageUrl(project);
  const absoluteImage = toAbsoluteUrl(imageUrl);
  const canonical = toAbsoluteUrl(`/case/${slug}`);

  return {
    title: `${title} – Realwebwins`,
    description,
    openGraph: {
      title: `${title} – Realwebwins`,
      description,
      url: canonical,
      type: "article",
      images: [
        {
          url: absoluteImage,
          alt: title,
        },
      ],
    },
    twitter: {
      card: "summary_large_image",
      title: `${title} – Realwebwins`,
      description,
      images: [absoluteImage],
    },
  };
}

export default async function CasePage({
  params,
}: {
  params: Promise<{ slug: string }>;
}) {
  const { slug } = await params;
  const project = await getProjectBySlug(slug);

  if (!project) {
    notFound();
  }

  const imageUrl = resolveImageUrl(project);

  return (
    <main className="mx-auto flex w-full max-w-4xl flex-col gap-8 px-6 py-12">
      <Link
        href="/cases"
        className="text-sm font-semibold text-primary hover:underline"
      >
        ← All cases
      </Link>

      <article className="flex flex-col gap-8">
        <header className="flex flex-col gap-4">
          <span className="text-sm uppercase tracking-wide text-muted-foreground">
            {project.platform ?? "Independent"}
          </span>
          <h1 className="text-3xl font-bold tracking-tight">
            {project.title ?? "Realwebwins case"}
          </h1>
          <div className="flex flex-wrap items-center gap-4 text-sm text-muted-foreground">
            <span className="rounded-full bg-emerald-100 px-3 py-1 text-emerald-700">
              Score: {formatScore(project.score)}
            </span>
            <span>Last refreshed {formatTimestamp(project.last_refreshed_at)}</span>
          </div>
        </header>

        <section className="overflow-hidden rounded-xl border bg-background shadow-sm">
          <Image
            src={imageUrl}
            alt={project.title ?? "Realwebwins case card"}
            width={1200}
            height={675}
            unoptimized
            className="h-auto w-full"
          />
        </section>

        <section className="flex flex-col gap-4">
          <h2 className="text-xl font-semibold">Summary</h2>
          <p className="text-muted-foreground">
            {project.summary ??
              "This case was generated by the Realwebwins research agent. Run a refresh to capture the latest insights and proof links."}
          </p>
          {project.proof_link ? (
            <p>
              <a
                href={project.proof_link}
                className="text-primary hover:underline"
                target="_blank"
                rel="noreferrer"
              >
                View proof
              </a>
            </p>
          ) : null}
        </section>
      </article>
    </main>
  );
}
